{"version":3,"sources":["components/TodoComponent/TodoContext.js","components/UserLogin/UserLogin.js","components/InputTodo/InputTodo.js","components/DisplayItems/DisplayItems.js","components/ParentTodo/ParentTodo.js","components/TodoComponent/TodoComponent.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","React","createContext","TodoProvider","Provider","TodoConsumer","Consumer","UserLogin","myState","Fragment","isLogged","onClick","clickHandler","className","Component","InputTodo","props","inputRef","createRef","this","current","focus","onKeyPress","saveChangeHandler","type","ref","DisplayItems","state","checked","lineThrough","handleCheck","event","target","setState","myTodos","onChange","defaultChecked","Todo","deleteHandler","name","ParentTodo","k","Todos","map","key","TodoComponent","myTodo","value","user","push","getAttribute","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c9a6910.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TodoContext = React.createContext(\"\");\r\n\r\nconst TodoProvider = TodoContext.Provider;\r\nconst TodoConsumer = TodoContext.Consumer;\r\n\r\nexport {TodoProvider, TodoConsumer};","import React, { Component } from \"react\";\r\nimport { TodoConsumer } from \"../TodoComponent/TodoContext\";\r\n\r\nclass UserLogin extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<TodoConsumer>\r\n\t\t\t\t{(myState) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t\t{myState.isLogged ? (\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tonClick={myState.clickHandler}\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-sm btn-primary mx-4\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tLogout\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tonClick={myState.clickHandler}\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-sm btn-primary mx-4\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tLogin\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t);\r\n\t\t\t\t}}\r\n\t\t\t</TodoConsumer>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default UserLogin;\r\n","import React, { Component } from \"react\";\r\nimport \"./InputTodo.css\";\r\n\r\nclass InputTodo extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.inputRef = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.inputRef.current.focus();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<input\r\n\t\t\t\t\tonKeyPress={this.props.saveChangeHandler}\r\n\t\t\t\t\tclassName=\"form-control\"\r\n          type=\"text\"\r\n\t\t\t\t\tref={this.inputRef}\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default InputTodo;\r\n","import React, { Component } from \"react\";\r\nimport \"./DisplayItems.css\";\r\nimport { TodoConsumer } from \"../TodoComponent/TodoContext\";\r\n\r\nclass DisplayItems extends Component {\r\n\tstate = {\r\n\t\tchecked: false,\r\n\t\tlineThrough: ''\r\n\t};\r\n\r\n\thandleCheck = (event) => {\r\n\t\tlet checked = event.target.checked;\r\n\t\tif(checked) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tlineThrough: 'line-through'\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tlineThrough: ''\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<TodoConsumer>\r\n\t\t\t\t{(myTodos) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tonChange={this.handleCheck}\r\n\t\t\t\t\t\t\t\t\tclassName=\"mr-4\"\r\n\t\t\t\t\t\t\t\t\tdefaultChecked={this.state.checked}\r\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<span className={this.state.lineThrough}>\r\n\t\t\t\t\t\t\t\t{this.props.Todo}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<span className=\"Item\">\r\n\t\t\t\t\t\t\t\t<span onClick={myTodos.deleteHandler}>\r\n\t\t\t\t\t\t\t\t\t<i name={this.props.Todo} className=\"fas fa-trash-alt\"></i>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t}}\r\n\t\t\t</TodoConsumer>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DisplayItems;\r\n","import React, { Component } from \"react\";\r\nimport DisplayItems from \"./../DisplayItems/DisplayItems\";\r\nimport { TodoConsumer } from \"../TodoComponent/TodoContext\";\r\n\r\nclass ParentTodo extends Component {\r\n\trender() {\r\n\t\tlet k = 1;\r\n\t\treturn (\r\n\t\t\t<TodoConsumer>\r\n\t\t\t\t{(myTodos) => {\r\n\t\t\t\t\treturn myTodos.Todos.map((Todo) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<React.Fragment key={++k}>\r\n\t\t\t\t\t\t\t\t<DisplayItems Todo={Todo} />\r\n\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t}}\r\n\t\t\t</TodoConsumer>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ParentTodo;\r\n","import React, { Component } from \"react\";\r\nimport InputTodo from \"./../InputTodo/InputTodo\";\r\nimport ParentTodo from \"./../ParentTodo/ParentTodo\";\r\nimport \"./TodoComponent.css\";\r\nimport { TodoProvider } from \"./TodoContext\";\r\n\r\nclass TodoComponent extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tTodos: [\"Learning React\", \"Contest a 8 pm\"],\r\n\t\t};\r\n\t}\r\n\r\n\tsaveChangeHandler = (event) => {\r\n\t\tlet myTodo = event.target.value;\r\n\t\tif (event.key === \"Enter\" && myTodo !== \"\") {\r\n\t\t\tlet user = { ...this.state };\r\n\t\t\tuser.Todos.push(myTodo);\r\n\t\t\tthis.setState({\r\n\t\t\t\tuser,\r\n\t\t\t});\r\n\t\t\tevent.target.value = \"\";\r\n\t\t}\r\n\t};\r\n\r\n\tdeleteHandler = (event) => {\r\n\t\tlet myTodo = event.target.getAttribute(\"name\");\r\n\t\tthis.setState({\r\n\t\t\tTodos: this.state.Todos.filter((Todo) => Todo !== myTodo),\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{this.props.isLogged ? (\r\n\t\t\t\t\t<div className=\"row TodoApp\">\r\n\t\t\t\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t\t\t\t<InputTodo saveChangeHandler={this.saveChangeHandler} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"col-md-8 TodoList\">\r\n\t\t\t\t\t\t\t<TodoProvider\r\n\t\t\t\t\t\t\t\tvalue={{ ...this.state, deleteHandler: this.deleteHandler }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<ParentTodo />\r\n\t\t\t\t\t\t\t</TodoProvider>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<h5 className=\"NotLoggedIn\">\r\n\t\t\t\t\t\t<i className=\"fas fa-ban mx-4\"></i>----- Login First -----\r\n\t\t\t\t\t\t<i className=\"fas fa-ban mx-4\"></i>\r\n\t\t\t\t\t</h5>\r\n\t\t\t\t)}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TodoComponent;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport UserLogin from \"./components/UserLogin/UserLogin\";\nimport TodoComponent from \"./components/TodoComponent/TodoComponent\";\nimport { TodoProvider } from \"./components/TodoComponent/TodoContext\";\n\nclass App extends Component {\n\tstate = {\n\t\tisLogged: false,\n\t};\n\n\tclickHandler = () => {\n\t\tthis.setState({\n\t\t\tisLogged: !this.state.isLogged,\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App container\">\n\t\t\t\t<h1>React Todo App</h1>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-md-12\">\n\t\t\t\t\t\t<TodoProvider\n\t\t\t\t\t\t\tvalue={{ ...this.state, clickHandler: this.clickHandler }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<UserLogin />\n\t\t\t\t\t\t</TodoProvider>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"col-md-12\">\n\t\t\t\t\t\t<TodoComponent isLogged={this.state.isLogged} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}